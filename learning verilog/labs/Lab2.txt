//1
module cnt1s (
	input [5:0] i,
	output reg [2:0] o
);
	always @ (*)
	  /*cei 6 biti ai intrarii sunt adunati => numarul de biti de 1*/
	  o = i[0] + i[1] + i[2] + i[3] + i[4] + i[5];
endmodule

module cnt1s_tb;
	reg [5:0] i;
	wire [2:0] o;

	cnt1s cnt1s_i (.i(i), .o(o));

	integer k;
	initial begin
		$display("Time\ti\t\to");
		$monitor("%0t\t%b(%2d)\t%b(%0d)", $time, i, i, o, o);
		i = 0;
		for (k = 1; k < 64; k = k + 1)
			#10 i = k;
	end
endmodule

//2
module div3 (
	input [3:0] i,
	output reg [2:0] o
);
	/*solutie minimizare*/
	always @ (*) begin
	  o[2] = i[3]&i[2];
	  o[1] = i[3]&(~i[2]) | (~i[3])&i[2]&i[1];
	  o[0] = (~i[3])&i[2]&(~i[1]) | (~i[2])&i[1]&i[0] | i[3]&(~i[2])&i[0] | i[3]&(~i[2])&i[1] | i[3]&i[1]&i[0];
	end
	
	/*solutie instructiune case
	always @ (*)
	  case (i)
	    0,1,2: o = 0;
	    3,4,5: o = 1;
	    6,7,8: o = 2;
	    9,10,11: o = 3;
	    12,13,14: o = 4;
	    default: o = 5;
	  endcase
	*/
	
	/*solutie instructiune if
	always @ (*)
	  if (i<3) o = 0;
	  else if (i<6) o = 1;
	  else if (i<9) o = 2;
	  else if (i<12) o = 3;
	  else if (i<15) o = 4;
	  else o = 5;
	*/
endmodule

module div3_tb;
	reg [3:0] i;
	wire [2:0] o;

	div3 div3_i (.i(i), .o(o));

	integer k;
	initial begin
		$display("Time\ti\t\to");
		$monitor("%0t\t%b(%2d)\t%b(%0d)", $time, i, i, o, o);
		i = 0;
		for (k = 1; k < 16; k = k + 1)
			#10 i = k;
	end
endmodule

//3
module msd (
  input [4:0] i,
  output reg [3:0] o
);
  always @ (*)
    if (i > 9)
      o = i / 10;
    else
      o = i;
endmodule

module msd_tb;
  reg [4:0] i;
  wire [3:0] o;

  msd msd_i (.i(i), .o(o));

  integer k;
  initial begin
    $display("Time\ti\t\to");
    $monitor("%0t\t%b(%2d)\t%b(%0d)", $time, i, i, o, o);
    i = 0;
    for (k = 1; k < 32; k = k + 1)
      #10 i = k;
  end
endmodule

//4
module r4b (
  input clk, rst_b, ld, sh, sh_in,
  input [3:0] d,
  output reg [3:0] q
);
  always @ (posedge clk, negedge rst_b)
    if (! rst_b)          q <= 0;
    else if (ld)          q <= d;
    else if (sh)          q <= {sh_in, q[3:1]};
endmodule

//5
module seq3b (
  input [3:0] i,
  output reg o
);
  /*configuratii binare continand secvente binare de 3 biti consecutivi
    de aceeasi valoare: 0000, 0001, 0111, 1000, 1110, 1111*/
  always @(*)
    case (i)
      0, 1, 7, 8, 14, 15: o = 1;
      default: o = 0;
    endcase
  /*un exercitiu cu cerinta usor modificata: identificarea tuturor
    configuratiilor de la intrare care au 3 biti consecutivi de acceasi
    valoare, considerand configuratia de la intrare circulara: bitul i[3]
    este vecin cu bitul i[0]; in acest caz se adauga suplimentar fata de 
    solutia de mai sus siconfiguratiile: 0010, 0100, 1011, 1101*/
endmodule

module seq3b_tb;
  reg [3:0] i;
  wire o;

  seq3b seq3b_i (.i(i), .o(o));

  integer k;
  initial begin
    $display("Time\ti\t\to");
    $monitor("%0t\t%b(%2d)\t%b", $time, i, i, o);
    i = 0;
    for (k = 1; k < 16; k = k + 1)
      #10 i = k;
  end
endmodule

//6
module text2nibble (
  input [7:0] i,
  output reg [3:0] o
);
  always @(*)
    if ((i >= 8'h30) && (i <= 8'h 39))
      o = i - 8'h30; /*se vor pastra ultimii, cei mai putin 
                       semnificativi 4 biti*/
    else
      o = 4'd15;
endmodule

module text2nibble_tb;
  reg [7:0] i;
  wire [3:0] o;

  text2nibble text2nibble_i (.i(i), .o(o));

  integer k;
  initial begin
    $display("Time\ti\ti_chr\to");
    $monitor("%0t\t%b\t%c\t%b(%d)", $time, i, i, o, o);
    i = 0;
    for (k = 1; k < 256; k = k + 1)
      #10 i = k;
  end
endmodule