module cons(
  input clk,rst_b,val,
  input [7:0] data,
  output reg [7:0] sum
);
  always @ (posedge clk, negedge rst_b)
    if (rst_b == 0)
      sum<=0;
    else if (val == 1)
      sum<=sum + data;
endmodule

module cons_tb;
  reg clk,rst_b;
  wire val;
  wire [7:0] data,sum;
  
  prod inst1(.clk(clk),.rst_b(rst_b),.val(val),.data(data));
  cons inst2(.clk(clk),.rst_b(rst_b),.val(val),.data(data),.sum(sum));
  localparam CLK_PERIOD=100,RUNNING_CYCLES=100,RST_DURATION=25;
  initial begin
    $display("time\tclk\trst_b\tval\tdata\tsum");
    $monitor("%4t\t%b\t%b\t%b\t%1d\t%3d",$time,clk,rst_b,val,data,sum);
    clk=0;
    repeat (2*RUNNING_CYCLES) #(CLK_PERIOD/2) clk=~clk;
  end
  initial begin
    rst_b=0;
    #RST_DURATION rst_b=~rst_b;
  end
endmodule



//////



module prod(
  input clk,rst_b,
  output reg val,
  output reg [7:0] data
);
  integer cntv, cntiv;
  always @ (posedge clk, negedge rst_b)
    if (rst_b == 0) begin
      val<=0;
      cntiv<=1;
    end else if (cntv > 0) begin
        val<=1;
        cntv<=cntv - 1;
        if (cntv == 1) begin
          val<=0;
          cntiv<=$urandom_range(1,4);
        end else
          data<=$urandom_range(0,5);
      end
    else if (cntiv > 0) begin
        val<=0;
        cntiv<=cntiv - 1;
        if (cntiv == 1) begin
          val<=1;
          data<=$urandom_range(0,5);
          cntv<=$urandom_range(3,5);
        end
      end
endmodule

module prod_tb;
  reg clk,rst_b;
  wire val;
  wire [7:0] data;
  
  prod inst1(.clk(clk),.rst_b(rst_b),.val(val),.data(data));
  localparam CLK_PERIOD=100, RUNNING_CYCLES=100, RST_DURATION=25;
  initial begin
    $display("time\tclk\trst_b\tval\tdata");
    $monitor("%5t\t%b\t%b\t%b\t%1d",$time,clk,rst_b,val,data);
    clk=0;
    repeat (2*RUNNING_CYCLES) #(CLK_PERIOD/2) clk=~clk;
  end
  initial begin
    rst_b=0;
    #RST_DURATION rst_b=~rst_b;
  end
endmodule
  


///////



module sha2inctrl(
  input clk,rst_b,lst_pkt,
  input [2:0] idx,
  output reg st_pkt,pad_pkt,
  output reg zero_pkt,mgln_pkt,
  output reg blk_val,msg_end
);
  localparam START=0,RX_PKT=1,PAD=2,ZERO=3,MGLN=4,MSG_END=5,STOP=6;
  reg [2:0] st,st_nxt;

  always @ (*)
    case(st)
      START,RX_PKT: if (lst_pkt == 0)             st_nxt=RX_PKT;
                    else                          st_nxt=PAD;
      PAD,ZERO:     if (idx == 7)                 st_nxt=MGLN;
                    else                          st_nxt=ZERO;
      MGLN:                                       st_nxt=MSG_END;
      MSG_END,STOP:                               st_nxt=STOP;
    endcase
  always @ (*) begin
    blk_val=0;
    msg_end=0;
    st_pkt=0;
    pad_pkt=0;
    zero_pkt=0;
    mgln_pkt=0;
    case(st)
      START: begin
        st_pkt=1; end
      RX_PKT: begin
        st_pkt=1;
        if (idx == 0)
          blk_val=1; end
      PAD: begin
        st_pkt=1;
        pad_pkt=1;
        if (idx == 0)
          blk_val=1; end
      ZERO: begin
        st_pkt=1;
        zero_pkt=1; end
      MGLN: begin
        st_pkt=1;
        mgln_pkt=1; end
      MSG_END: begin
        blk_val=1;
        msg_end=1; end
    endcase
  end
  always @ (posedge clk, negedge rst_b)
    if (rst_b == 0)                                 st<=START;
    else                                            st<=st_nxt;
endmodule