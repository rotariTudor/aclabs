//1
module bcm(input i1,input i2, input i3, output o1,output o2);
  
  assign o1 = ((~i1) & i3) | ((~i2) & i3) | (i1 & i2 & (~i3));
  assign o2 = ((~i2) & (~i3)) | ((~i2) & (~i1)) | (i1 & i2 );
  
endmodule

module bcm_tb();
  reg i1, i2, i3;
  wire o1, o2;
  
  bcm f(.i1(i1), .i2(i2), .i3(i3), .o1(o1), .o2(o2));
  
  integer k = 0;
  
  initial begin
    for(k=0;k<8;k=k+1)
      #20 {i1,i2,i3}=k;
  end
  
endmodule

//2
module d_ff(
  input clk,rst_b,set_b,d,
  output reg q
);
  always @ (posedge clk, negedge rst_b, negedge set_b)
    if (set_b == 0)           q<=1;
    else if (rst_b == 0)      q<=0;
    else                      q<=d;
endmodule

module lfsr5b(
  input clk,rst_b,
  output [4:0] q
);

  generate
    genvar k;
    for (k=0; k<5; k=k+1) begin:v
      if (k == 0)
        d_ff gu(.clk(clk),.rst_b(1'd1),.set_b(rst_b),.d(q[4]),.q(q[k]));
      else if (k == 3)
        d_ff gu(.clk(clk),.rst_b(1'd1),.set_b(rst_b),.d(q[2]|q[4]),.q(q[k]));
      else if (k == 4)
        d_ff gu(.clk(clk),.rst_b(1'd1),.set_b(rst_b),.d(~(q[3]^q[4])),.q(q[k]));
      else 
         d_ff gu(.clk(clk),.rst_b(1'd1),.set_b(rst_b),.d(q[k-1]),.q(q[k]));
    end
  endgenerate
endmodule

module lfsr5b_tb;
  reg clk,rst_b;
  wire [4:0] q;
  lfsr5b inst(.clk(clk),.rst_b(rst_b),.q(q));
  localparam CLK_PERIOD=100, RUNNING_CYCLES=35, RST_DURATION=25;
  initial begin
    clk=0;
    repeat (2*RUNNING_CYCLES) #(CLK_PERIOD/2) clk=~clk;
  end
  initial begin
    rst_b=0;
    #RST_DURATION rst_b=1;
  end
endmodule

//3
module mux_2s #(
    parameter w = 4
) (
    input [w-1:0] d0, d1, d2, d3,
    input [1:0] s,
    output [w-1:0] o
);

    wire [3:0] dout; //decoder out; cei 4 biti de iesire ai decodificatorului
    dec_2s inst0(.s(s), .e(1'd1), .o(dout));
    // se construiesc caile de propagae a datelor de la fiecare intrare (d0, d1, d2, d3)
    // spre iesire; fiecare din cele 4 cai de propagare va avea un driver tri-state
    // comandat de o linie de iesire a decodificatorului
    assign o = (dout[0]) ? d0 : {w{1'bz}}; // {w{1'bz}} replica bitul 1'bz (impedanta ridicata) pe w biti
    assign o = (dout[1]) ? d1 : {w{1'bz}}; // fiecare assign verifica starea semnalului dout[k]; daca acesta
    assign o = (dout[2]) ? d2 : {w{1'bz}}; // este adevarat, assign-ul va atribui iesirii valoarea intrarii d[k]
    assign o = (dout[3]) ? d3 : {w{1'bz}};
endmodule


module dec_2s (
	input e,
	input [1:0] s,
	output reg [3:0] o
);
	always @ (*)
		case ({e,s})
			0,1,2,3: o = 4'b0000;
			4 : o = 4'b0001;
			5 : o = 4'b0010;
			6 : o = 4'b0100;
			default: o = 4'b1000; 
		endcase
endmodule

// desi enuntul nu solicita construirea modulului testbench, mai jos este prezentat un astfel de modul
// impreuna cu fisierul script
module mux2s_tb;
    reg [7:0] d0, d1, d2, d3;
    reg [1:0] s;
    wire [7:0] o;

    mux_2s #(.w(8)) dut(.s(s), .d0(d0), .d1(d1), .d2(d2), .d3(d3), .o(o));

    integer k;
    initial begin
        $display("d0_16\td1_16\td2_16\td3_16\ts_10\t||\to_16");
        $monitor("%h\t%h\t%h\t%h\t%d\t||\t%h", d0, d1, d2, d3, s, o);
        for (k = 0; k < 16; k = k + 1) begin
            {d3, d2, d1, d0} = $urandom();
            s = $urandom();
            #10;
        end
    end
endmodule

//4

